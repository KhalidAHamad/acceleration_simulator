"""
A powertrain modeling system for electric and internal combustion engines.

This module contains the following classes:
    - Powertrain: [description].
    - ElectricPowertrain: [description].

TODO (add): combustion powertrain class.
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass


class Powertrain(ABC):
    """Represents a generic powertrain model."""

    @abstractmethod
    def get_tractive_force(self, velocity: float, tire_rolling_radius: float) -> float:
        """Returns the tractive force generated by the powertrain."""


@dataclass
class ElectricPowertrain(Powertrain):
    """Represents an electric powertrain model."""

    torque_max: int
    power_max: int
    gear_ratio: float
    transmission_eff: float
    # TODO: decide if electric powertrains have a final drive ratio

    def get_tractive_force(self, velocity: float, tire_rolling_radius: float) -> float:
        """Returns the tractive force generated by the powertrain."""

        return 0.0


def main() -> None:
    """main function."""
    e_powertrain = ElectricPowertrain(30, 100, 4, 0.98)
    print(e_powertrain.get_tractive_force(10, 0.31))


if __name__ == "__main__":
    main()
